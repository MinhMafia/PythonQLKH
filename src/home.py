import customtkinter as ctk
import tkinter.ttk as ttk
from PIL import Image


def homeRun(root):
    root.title("Trang ch·ªß")
    for widget in root.winfo_children():
        widget.destroy()  # X√≥a giao di·ªán c≈© ƒë·ªÉ chuy·ªÉn sang home

    def CanGiuaCuaSo(window, width, height):
        window.resizable(width=False, height=False)
        screen_height = window.winfo_screenheight()
        screen_width = window.winfo_screenwidth()

        x = (screen_width - width) // 2
        y = (screen_height - height) // 2

        window.geometry(f"{width}x{height}+{x}+{y}")

    CanGiuaCuaSo(root, 1000, 650)

    # Chia th√†nh 2 Frame
    frame_left = ctk.CTkFrame(root, width=250, height=650, corner_radius=0)
    frame_left.pack(side="left", fill="y")

    frame_right = ctk.CTkFrame(root, width=750, height=650)
    frame_right.pack(side="right", fill="both", expand=True)

    # Qu·∫£n l√Ω kh√°ch h√†ng

    def Custom():
        root.title("Qu·∫£n l√Ω kh√°ch h√†ng")

        # Chia frame_right th√†nh head, body
        frame_head_customer = ctk.CTkFrame(
            frame_right, width=750, height=100, fg_color="#C8A280")
        frame_head_customer.pack(fill="x")

        frame_body_customer = ctk.CTkFrame(
            frame_right, width=750, height=550, fg_color="#A67B5B")
        frame_body_customer.pack(fill="both", expand=True)

        # ph·∫ßn search
        frame_search = ctk.CTkFrame(
            frame_head_customer, fg_color="transparent")
        frame_search.pack(side="left", padx=10, pady=15)

        search = ctk.CTkEntry(frame_search,
                              placeholder_text="Nh·∫≠p n·ªôi dung t√¨m ki·∫øm", width=180)
        search.pack(side="left", padx=5)

        searchBtn = ctk.CTkButton(frame_search, text="üîç T√¨m ki·∫øm", width=85)
        searchBtn.pack(side="left", padx=5)

        # Frame ch·ª©a c√°c n√∫t
        frame_buttons = ctk.CTkFrame(
            frame_head_customer, fg_color="transparent")
        frame_buttons.pack(side="right", padx=10, pady=10)

        btnThem = ctk.CTkButton(frame_buttons,
                                text="‚ûï Th√™m", width=80, height=25)
        btnThem.pack(side="left", padx=10, pady=10)
        btnSua = ctk.CTkButton(frame_buttons,
                               text="‚úè S·ª≠a", width=80, height=25)
        btnSua.pack(side="left", padx=10, pady=10)

        btnXoa = ctk.CTkButton(frame_buttons,
                               text="‚ùå X√≥a", width=80, height=25)
        btnXoa.pack(side="left", padx=10, pady=10)

        btnDetail = ctk.CTkButton(
            frame_buttons, text="üìÑ Chi ti·∫øt", width=80, height=25)
        btnDetail.pack(side="left", padx=10, pady=10)

        # ---------------------- B·∫¢NG DANH S√ÅCH KH√ÅCH H√ÄNG --------------
        columns = ("ID", "H·ªç v√† T√™n", "SƒêT", "Email")

        style = ttk.Style()
        # K√≠ch c·ª° ch·ªØ c·ªßa n·ªôi dung b·∫£ng
        style.configure("Treeview", font=("Arial", 14))
        style.configure("Treeview.Heading", font=(
            "Arial", 16, "bold"))  # K√≠ch c·ª° ch·ªØ c·ªßa ti√™u ƒë·ªÅ
        # T·∫°o Treeview (B·∫£ng)
        table = ttk.Treeview(frame_body_customer,
                             columns=columns, show="headings", height=20)

        # ƒê·ªãnh nghƒ©a ti√™u ƒë·ªÅ c·ªôt
        table.heading("ID", text="ID")
        table.heading("H·ªç v√† T√™n", text="H·ªç v√† T√™n")
        table.heading("SƒêT", text="SƒêT")
        table.heading("Email", text="Email")

        # CƒÉn ch·ªânh ƒë·ªô r·ªông c·ªôt
        table.column("ID", width=50, anchor="center")
        table.column("H·ªç v√† T√™n", width=250, anchor="w")
        table.column("SƒêT", width=150, anchor="center")
        table.column("Email", width=250, anchor="w")

     # Th√™m d·ªØ li·ªáu m·∫´u
        data = [
            (1, "Nguy·ªÖn VƒÉn A", "0123456789", "a@gmail.com"),
            (2, "Tr·∫ßn Th·ªã B", "0987654321", "b@gmail.com"),
            (3, "L√™ VƒÉn C", "0345678901", "c@gmail.com"),
        ]
        for row in data:
            table.insert("", "end", values=row)

        # Th√™m thanh cu·ªôn (Scrollbar)
        scroll = ttk.Scrollbar(frame_body_customer,
                               orient="vertical", command=table.yview)
        table.configure(yscrollcommand=scroll.set)

        # Hi·ªÉn th·ªã b·∫£ng v√† thanh cu·ªôn
        table.pack(side="left", fill="both", expand=True, padx=10, pady=10)
        scroll.pack(side="right", fill="y")

    def Home():
        # T·∫£i ·∫£nh t·ª´ file
        global home_image
        image_path = r"D:\Nam3_HK2\python\src\images\home_image.png"
        home_image = ctk.CTkImage(light_image=Image.open(
            image_path), size=(750, 650))

        # T·∫°o label ch·ª©a ·∫£nh
        label = ctk.CTkLabel(frame_right, image=home_image, text="")
        label.pack(expand=True)
    # H√†m chuy·ªÉn trang

    def show_frame(page):
        for widget in frame_right.winfo_children():
            widget.destroy()  # X√≥a n·ªôi dung c≈©

        match page:
            case "Home":
                Home()
            case "Customer":
                Custom()
            case _:
                label = ctk.CTkLabel(
                    frame_right, text="‚ùå 404 Not Found", font=("Arial", 50))
                label.pack(expand=True)

    # Chia frame_left thanh 2

    frame_left_account = ctk.CTkFrame(frame_left, width=250, height=100)
    frame_left_account.pack(fill="x", pady=10)

    frame_left_menu = ctk.CTkFrame(frame_left, width=250, height=550)
    frame_left_menu.pack(fill="both", expand=True)

    # Mo ta user
    global avatar
    avatar_path = r"D:\Nam3_HK2\python\src\images\avatar.png"

    # Th√™m n√∫t v√†o khung tr√°i
    btnHome = ctk.CTkButton(frame_left_menu, text="üè† Trang ch·ªß",
                            command=lambda: show_frame("Home"))
    btnHome.pack(pady=10, padx=20)

    btnCustomer = ctk.CTkButton(
        frame_left_menu, text="üë§ Kh√°ch h√†ng", command=lambda: show_frame("Customer"))
    btnCustomer.pack(pady=10, padx=20)

    # Hi·ªÉn th·ªã trang ch·ªß m·∫∑c ƒë·ªãnh khi m·ªü ·ª©ng d·ª•ng
    show_frame("Home")

    # def on_closing():
    #     root.destroy()  # ƒê√≥ng c·ª≠a s·ªï Home
    #     root_login.deiconify()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï Login

    # root.protocol("WM_DELETE_WINDOW", on_closing)  # G·ªçi h√†m khi nh·∫•n n√∫t X

    root.mainloop()


if __name__ == "__main__":
    root = ctk.CTk()
    homeRun(root)
